// Prisma schema (initial minimal setup)
// 役割: DB モデル定義 + マイグレーション基盤
//   - 実運用向け: イベント / ユーザ / タグ / 位置情報 (PostGIS) などを段階的に追加
//   - 地理カラム追加例:  geometry などは PostgreSQL 拡張 (PostGIS) 有効化後に `Unsupported("geometry")` 型または prisma-postgres-extensions を活用

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid()) // ユーザーID（主キー）: 文字列の一意識別子
  username  String   @unique              // ユーザー名: ログイン/表示用、一意制約あり
  password  String   // パスワード: 実運用ではハッシュ化して保存する（例: bcrypt）
  points    Int      @default(0)          // ポイント: 整数、デフォルト0 (ユーザー報酬等)
  createdAt DateTime @default(now())      // 作成日時: レコード作成時刻を自動設定
  updatedAt DateTime @updatedAt           // 更新日時: レコード更新時に自動更新

  // 作成したイベント（1対多のリレーション）
  events    Event[]                        // User が作成した Event の配列

  // 参加したイベント（多対多を中間テーブルで管理）
  participations EventParticipant[]       // ユーザーの参加情報リスト
}

model Event {
  id        String   @id @default(cuid()) // イベントID（主キー）: 文字列の一意識別子
  title     String                     // タイトル: イベント名
  imageUrl  String?                    // 画像URL: 代表画像を外部ストレージに置き、そのURLを保存
  description String?                  // 説明: イベント詳細テキスト（任意）
  createdAt DateTime @default(now())   // 投稿時間: レコード作成時刻
  updatedAt DateTime @updatedAt        // 更新日時: レコード更新時に自動更新

  // シンプルな位置情報（PostGIS を使わない場合）
  latitude  Float                     // 緯度: 小数 (例: 35.681236)
  longitude Float                     // 経度: 小数 (例: 139.767125)

  // 投稿者（多:1 のリレーション）
  authorId  String?                    // 投稿者の User.id (外部キー)
  author    User?    @relation(fields: [authorId], references: [id], onDelete: SetNull) // User 削除時に authorId を NULL にする

  // 参加情報（中間テーブル経由で多対多を表現）
  participations EventParticipant[]    // このイベントへの参加者一覧
}

// 中間テーブル: ユーザーのイベント参加を表す（多対多）
model EventParticipant {
  user      User    @relation(fields: [userId], references: [id]) // 参加ユーザー
  userId    String                                           // User.id を参照する外部キー

  event     Event   @relation(fields: [eventId], references: [id]) // 参加先イベント
  eventId   String                                           // Event.id を参照する外部キー

  createdAt DateTime @default(now())                         // 参加日時: 参加した時刻を保存

  @@id([userId, eventId]) // 複合主キー: 同じユーザーが同じイベントに重複参加しないようにする
  @@index([eventId])      // イベント単位での検索高速化
  @@index([userId])       // ユーザー単位での検索高速化
}

// インデックス例（後で必要になれば有効化）
// @@index([authorId, createdAt])