"use client";

import { useState, useEffect } from "react";
import dynamic from "next/dynamic";
import { EventCard } from "@/app/search/components/EventCard";

const MiniMap = dynamic(() => import("@/app/search/components/MiniMap"), { ssr: false });

export default function SearchPage() {
  const [keyword, setKeyword] = useState("");
  const [radius, setRadius] = useState(10);
  const [events, setEvents] = useState<any[]>([]);

  // 現在地
  const [currentPos, setCurrentPos] = useState<[number, number] | null>(null);

  const handleCurrentLocation = () => {
    if (!navigator.geolocation) {
      alert("このブラウザでは位置情報が取得できません。");
      return;
    }

    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords;
        setCurrentPos({ lat: latitude, lng: longitude });
        handleSearch({ lat: latitude, lng: longitude }); // 取得したら検索実行
      },
      (error) => {
        switch (error.code) {
          case error.PERMISSION_DENIED:
            alert("現在地が取得できませんでした。位置情報を許可してください。");
            break;
          case error.POSITION_UNAVAILABLE:
            alert("位置情報が利用できません。");
            break;
          case error.TIMEOUT:
            alert("位置情報の取得に時間がかかりすぎました。");
            break;
          default:
            alert("位置情報の取得で不明なエラーが発生しました。");
        }
      }
    );
  };


  const handleSearch = async (pos?: [number, number]) => {
    if (!pos) {
      // 位置情報なしなら検索キャンセル or 入力値だけ検索
      alert("現在地が取得できませんでした。位置情報を許可してください。");
      return;
    }

    try {
      const res = await fetch("/api/events", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          keyword,
          lat: pos[0],
          lng: pos[1],
          radius,
        }),
      });

      if (!res.ok) throw new Error("検索に失敗しました");
  
      const data = await res.json();
      setEvents(data);
    } catch (err) {
      console.error(err);
      alert("検索エラーが発生しました");
    }
  };


  // 入力変化でエラー消すなど
  useEffect(() => {
    // ここに debounceや自動検索も入れられる
  }, [keyword, radius]);

  return (
    <div className="flex flex-col h-screen bg-gray-100">
      {/* --- 検索フォーム --- */}
      <form
        className="bg-white p-4 shadow-md flex flex-wrap gap-2 items-center"
        onSubmit={(e) => {
          e.preventDefault();
          handleSearch(currentPos || undefined);
        }}
      >
        <input
          type="text"
          className="flex-1 min-w-[120px] border rounded p-2"
          placeholder="イベント名を検索"
          value={keyword}
          onChange={(e) => setKeyword(e.target.value)}
        />

        <select
          className="border rounded p-2"
          value={radius}
          onChange={(e) => setRadius(Number(e.target.value))}
        >
          {[5, 10, 20, 50].map((r) => (
            <option key={r} value={r}>{r}km</option>
          ))}
        </select>

        <button
          type="button"
          className="p-2 border rounded"
          onClick={handleCurrentLocation}
        >
          📍
        </button>

        <button
          type="submit"
          className="p-2 bg-blue-500 text-white rounded"
        >
          🔍
        </button>
      </form>

      {/* --- 検索結果 --- */}
      <div className="flex-1 overflow-y-auto p-4">
        {events.map((ev) => (
      <EventCard
            key={ev.id}
            title={ev.title}
            distance={ev.distance}
            date={ev.date}
            lat={ev.lat}
            lng={ev.lng}
            description={ev.description}
          />
        ))}
      </div>
    </div>

  );
}
